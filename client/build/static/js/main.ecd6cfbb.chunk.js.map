{"version":3,"sources":["components/NavBar/index.js","components/Header/index.js","components/Wrapper/index.js","pages/NoMatch.js","components/Form/index.js","components/Results/index.js","utils/API.js","pages/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","window","location","pathname","Header","Wrapper","props","Object","assign","NoMatch","components_Header","role","aria-label","Form","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","handleFormSubmit","Results","results","map","result","key","alt","items","src","image","title","authors","description","link","API","getBook","query","axios","get","concat","Search","state","searchBook","then","res","_this","setState","data","catch","err","console","log","event","target","defineProperty","preventDefault","components_Form","this","handleInputSubmit","components_Results","React","Component","App","NavBar","components_Wrapper","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecd6cfbb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// import \"./style.css\";\n\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link className=\"navbar-brand\" to=\"/\">Google Books</Link>\n            <div>\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <Link\n                            to=\"/search\"\n                            className={window.location.pathname === \"/search\" ? \"nav-link active\" : \"nav-link\"}\n                        > Search\n            </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link\n                            to=\"/saved\"\n                            className={window.location.pathname === \"/saved\" ? \"nav-link active\" : \"nav-link\"}\n                        >Saved\n            </Link>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\n\nfunction Header() {\n    return (\n        <div className=\"jumbotron text-center\">\n            <h1>Google Books Search</h1>\n            <h2>Search for and save Books of Interest</h2>\n        </div>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport Header from \"../components/Header\";\n\nfunction NoMatch() {\n  return (\n    <div>\n          <Header>\n            <h1>404 Page Not Found</h1>\n            <h1>\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n                ðŸ™„\n              </span>\n            </h1>\n          </Header>\n    </div>\n  );\n}\n\nexport default NoMatch;\n","import React from \"react\";\n\nfunction Form(props){\nreturn (\n  <form>\n    <div className=\"form-group\">\n      <label htmlFor=\"search\">Book Search:</label>\n      <input\n        onChange={props.handleInputChange}\n        value={props.search}\n        name=\"search\"\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Search a Book\"\n        id=\"search\"\n      />\n      <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\n        Search\n        </button>\n    </div>\n  </form>\n);\n}\n\nexport default Form;\n","import React from \"react\";\n\nfunction Results(props) {\n    return (\n        <div>\n            <h2>Results</h2>\n            {/* {this.state.books.length ? ( */}\n                <ul className=\"list-group\">\n                    {props.results.map(result => (\n                        <li className=\"list-group-item\" key={result.id}>\n                            <img alt={result.items} className=\"img-fluid\" src={result.image} />\n                            <h3>{result.title} by {result.authors}</h3>\n                            <p>{result.description}</p>\n                            <button onClick={result.link} className=\"btn btn-primary mt-3\">View </button>\n                            {/* <button onClick=? className=\"btn btn-primary mt-3\">Save </button> */}\n                        </li>\n                    ))}\n                </ul>\n            {/* ) : ( */}\n                    {/* <h3>No Results to Display</h3> */}\n                {/* )} */}\n        </div>\n    );\n}\n\nexport default Results;\n","import axios from \"axios\";\n\nexport default {\n    getBook: function (query) {\n        return axios.get(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n    },\n};\n","import React from \"react\";\nimport Form from \"../components/Form\";\nimport Results from \"../components/Results\";\nimport API from \"../utils/API\";\n\n\nclass Search extends React.Component {\n    state = {\n        value: \"\",\n        results: []\n    };\n\n    //   this.handleInputChange = this.handleInputChange.bind(this);\n    //   this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    searchBook = query => {\n        API.getBook(query)\n            .then(res => this.setState({ results: res.data.data }))\n            .catch(err => console.log(err));\n    };\n\n    handleInputChange = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        this.searchBook(this.state.search);\n    };\n\n\n    render() {\n        return (\n            <div>\n                <Form \n                search={this.state.search}\n                handleInputChange={this.handleInputChange}\n                handleInputSubmit={this.handleFormSubmit}\n                />\n                <Results results={this.state.results} />\n            </div>\n        )\n    }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\n\nimport NoMatch from \"./pages/NoMatch\";\nimport Search from \"./pages/Search\";\nimport Saved from \"./pages/Saved\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n \n\n  render() {\n    return (\n      <Router>\n        <div>\n          <NavBar />\n          <Header />\n          <Wrapper>\n            <Route exact path=\"/\" component={Search} />\n            <Route exact path=\"/search\" component={Search} />\n            {/* <Route exact path=\"/saved\" component={Saved} /> */}\n            <Route exact path=\"/noMatch\" component={NoMatch} />\n          </Wrapper>\n        </div>\n      </Router>\n    )\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}